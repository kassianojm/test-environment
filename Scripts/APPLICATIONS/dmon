#!/bin/bash
# Script that uses dstat to aggretate relevant resource statistcs,
# write them to a CSV file and format this file to be directly imported 
# by R scripts.
#
# Marcelo Veiga Neves <marcelo.veiga@gmail.com>
#

dstat=/usr/bin/dstat
verbose=0
interval=1

HAS_CPUTEMP=0
HAS_CPUFREQ=0

dstat_check()
{
	# Check if dstat is installed
	if [ ! -e "$dstat" ]
	then
		echo "Error: $dstat not found."
		exit 1
	fi

	# Check if the cpu temperature plugin is working
	$dstat --cputemp 1 0 >/dev/null 2>/dev/null
	if [ $? -eq 0 ]
	then
		HAS_CPUTEMP=1
	fi

	# Check if the cpu frequency plugin is working
	$dstat --cpufreq 1 0 >/dev/null 2>/dev/null
	if [ $? -eq 0 ]
	then
		HAS_CPUFREQ=1
	fi
}

dstat_run()
{
	output=$1
	interval=$2
	duration=$3

	pids=`ps axuf | grep python | grep dstat | awk '{print $2}'`
	if [ -n "$pids" ]
	then
		echo >&2 "Monitor is already running ($pids) ..."
		exit
	fi

	# Build the CPU list as reported by dstat
	ncpu=`$dstat --cpu --full --nocolor 1 0 | head -n 1 | tr -d '-' | tr ' ' '\n' | wc -l`
	cpu_list="total"
	for i in `seq 1 $ncpu`
	do
		let i--
		cpu_list="$cpu_list,$i"
	done

	# Build the network interface list as reported by dstat
	ifaces=`$dstat --net --full --nocolor 1 0 | head -n 1 | tr -d '-' | sed 's/net\///g'`
	iface_list="total"
	for i in $ifaces
	do
		eth=`echo $i | sed -r 's/.*eth([0-9]*).*/\1/g'`
		iface_list="$iface_list,eth$eth"
	done

	# Build the IO devices list as reported by dstat
	disks=`$dstat --disk --full --nocolor --noupdate 1 0 | head -n 1 | sed 's/ /\n/g' | sed -r 's/.*dsk\/([^-]*).*/\1/g' | tr '\n' ' '`
	disk_list="total"
	for i in $disks
	do
		disk_list="$disk_list,$i"
	done

	if [ $count -eq 0 ]
	then
		count=""
	fi

	rm -f $output
	cmd="$dstat --epoch --mem --swap --sys --page --cpu -C $cpu_list --net -N $iface_list --disk --io -D $disk_list --nocolor"

	if [ $HAS_CPUTEMP -eq 1 ]
	then
		cmd=$cmd" --cputemp"
	fi

	if [ $HAS_CPUFREQ -eq 1 ]
	then
		cmd=$cmd" --cpufreq"
	fi

	cmd=$cmd" --output $output $interval $count"

	echo $cmd
	($cmd &)
}

dstat_stop()
{
	pids=`ps axuf | grep python | grep dstat | awk '{print $2}'`
	if [ -n "$pids" ]
	then
		kill -9 $pids 2>/dev/null >/dev/null
	fi
}

dstat_status()
{
	pids=`ps axuf | grep python | grep dstat | awk '{print $2}'`
	if [ -n "$pids" ]
	then
		echo "Monitor is running ($pids) ..."
	else
		echo "Monitor not running."
	fi
}

dstat_parse()
{
	output=$1

	cpu_list=`cat $output | grep "Cmdline:" | sed -r 's/^.*--cpu -C ([^ ]+).*/\1/g'`
	disk_list=`cat $output | grep "Cmdline:" | sed -r 's/^.*--disk --io -D ([^ ]+).*/\1/g'`
	net_list=`cat $output | grep "Cmdline:" | sed -r 's/^.*--net -N ([^ ]+).*/\1/g'`

	m=`cat $output | sed '7!d' | tr ',' ' ' | tr -d '\"'`
	metrics=($m)

	n=0

	# timestamp
	line="timestamp"
	let n++

	# memory
	line="$line,mem_${metrics[n]}"
	let n++
	line="$line,mem_${metrics[n]}"
	let n++
	line="$line,mem_${metrics[n]}"
	let n++
	line="$line,mem_${metrics[n]}"
	let n++

	# swap
	line="$line,swap_${metrics[n]}"
	let n++
	line="$line,swap_${metrics[n]}"
	let n++

	# system
	line="$line,${metrics[n]}"
	let n++
	line="$line,${metrics[n]}"
	let n++

	# page
	line="$line,page_${metrics[n]}"
	let n++
	line="$line,page_${metrics[n]}"
	let n++

	# cpu
	for i in `echo $cpu_list | tr ',' ' '`
	do
		line="$line,cpu$i""_${metrics[n+0]}"
		line="$line,cpu$i""_${metrics[n+1]}"
		line="$line,cpu$i""_${metrics[n+2]}"
		line="$line,cpu$i""_${metrics[n+3]}"
		line="$line,cpu$i""_${metrics[n+4]}"
		line="$line,cpu$i""_${metrics[n+5]}"
		let n=n+6
	done

	# network
	for i in `echo $net_list | tr ',' ' '`
	do
		line="$line,net_$i""_${metrics[n+0]}"
		line="$line,net_$i""_${metrics[n+1]}"
		let n=n+2
	done

	# disk
	for i in `echo $disk_list | tr ',' ' '`
	do
		line="$line,disk_$i""_${metrics[n+0]}"
		line="$line,disk_$i""_${metrics[n+1]}"
		let n=n+2
	done

	# I/O
	for i in `echo $disk_list | tr ',' ' '`
	do
		line="$line,io_$i""_${metrics[n+0]}"
		line="$line,io_$i""_${metrics[n+1]}"
		let n=n+2
	done

#	if [ $HAS_CPUFREQ -eq 1 ]
#	then
#		# frequency
#		for i in `echo $cpu_list | sed 's/total,//g' | tr ',' ' '`
#		do
#		    line="$line,freq_${metrics[n]}"
#		    let n++
#		done
#	fi

	if [ $HAS_CPUTEMP -eq 1 ]
	then
		# temperature
		for i in `echo $cpu_list | tr ',' ' '`
		do
			line="$line,temp_${metrics[n]}"
			let n++
		done
	fi

	echo $line | tr ',' ';'
	cat $output | sed '1,7d' | sed -r 's/^([^\.]*)[^,]*(.*)/\1\2/g' | tr ',' ';'
}

print_usage()
{
	echo "Usage: $0 [options] command [logfile [duration]]"
	echo
	echo "Commands:"
	echo "$0 start logfile.txt [duration]   Start monitor"
	echo "$0 status                         Verify monitor status"
	echo "$0 stop                           Stop monitor"
	echo "$0 parse logfile.txt              Convert log file to a R-friendly format"
	echo
	echo "Options:"
	echo " -i, --interval INTERVAL Specify monitoring interval in seconds (default: 1)"
	echo " -v, --verbose           Make the operation more talkative"
	echo " -h, --help              Print this help message"
	exit 0
}

args=$(getopt -l "searchpath:" -o "i:vh" -- "$@")

eval set -- "$args"

while [ $# -ge 1 ]
do
	case "$1" in
	--)
		# No more options left.
		shift
		break
		;;
	-i|--interval)
		interval=$2
		shift
		;;
	-v|--verbose)
		verbose=1
		shift
		;;
	-h|--help)
		print_usage
		;;
	esac
	shift
done

cmd=$1
case "$cmd" in
	"start")
		if [ $# -lt 2 ]
		then
			print_usage
		fi
		logfile=$2
		count=0
		if [ $# -eq 3 ]
		then
			duration=$3
			count=`echo $duration/$interval | bc`
		fi
		dstat_check
		if [ $verbose -eq 1 ]
		then
			dstat_run $logfile $interval $count
		else
			dstat_run $logfile $interval $count > /dev/null
		fi
		sleep 0.5
		dstat_status
		;;
	"stop")
		dstat_stop
		;;
	"status")
		dstat_status
		;;
	"parse")
		if [ $# -lt 2 ]
		then
			print_usage
		fi
		logfile=$2
		dstat_check
		dstat_parse $logfile
		;;
	*)
		print_usage
	;;
esac

